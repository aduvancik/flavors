'use client';

import { useEffect, useState } from 'react';
import { doc, getDoc, setDoc, getDocs, collection } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import toast from 'react-hot-toast';
import Link from 'next/link';
import { useRouter } from 'next/navigation';

const TELEGRAM_BOT_TOKEN = '7716741812:AAEF9h_3of02kJ6NsBxrRk0_2b3z7e58oHA';
const TELEGRAM_CHAT_ID = '-1002893695048';

async function sendTelegramMessage(text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text,
      parse_mode: 'HTML'
    })
  });
}

export default function AdminDashboard() {
  const [log, setLog] = useState<any>(null);
  const [editMode, setEditMode] = useState(false);
  const [form, setForm] = useState({ total: '', cash: '', card: '', salary: '', mine: '' });
  const [amount, setAmount] = useState('');
  const router = useRouter();

  useEffect(() => {
    const fetch = async () => {
      const ref = doc(db, 'seller_logs', 'current');
      const snap = await getDoc(ref);

      if (snap.exists()) {
        const data = snap.data();
        setLog(data);
        setForm({
          total: String(data.total ?? 0),
          cash: String(data.cash ?? 0),
          card: String(data.card ?? 0),
          salary: String(data.salary ?? 0),
          mine: String(data.mine ?? 0),
        });
      } else {
        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        const emptyData = { total: 0, cash: 0, card: 0, salary: 0, mine: 0 };
        await setDoc(ref, emptyData);
        setLog(emptyData);
        setForm({
          total: '0',
          cash: '0',
          card: '0',
          salary: '0',
          mine: '0',
        });
      }
    };
    fetch();
  }, []);


  const sendReportAndAvailability = async (newData: any, operation: string) => {
    const snapshot = await getDocs(collection(db, 'liquids'));
    const flavors: string[] = [];
    const emptyFlavors: string[] = [];
    const emptyBrands: string[] = [];

    snapshot.forEach(docSnap => {
      const data = docSnap.data();
      const brand = data.brand;
      const activeFlavors = (data.flavors || []).filter((f: any) => (f.quantity ?? 0) > 0);
      if (activeFlavors.length) {
        activeFlavors.forEach((f: any) => {
          flavors.push(`${brand} - ${f.name}: ${f.quantity}—à—Ç`);
        });
      } else {
        emptyBrands.push(brand);
      }
      (data.flavors || []).forEach((f: any) => {
        if ((f.quantity ?? 0) === 0) {
          emptyFlavors.push(`${brand} - ${f.name}`);
        }
      });
    });

    const reportMessage = `üßæ <b>${operation}</b>

<b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–≤–∞—Ä (–∑–∞–ª–∏—à–æ–∫):</b> ${newData.total} –≥—Ä–Ω
<b>–ì–æ—Ç—ñ–≤–∫–∞:</b> ${newData.cash} –≥—Ä–Ω
<b>–ö–∞—Ä—Ç–∞:</b> ${newData.card} –≥—Ä–Ω
<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> ${newData.cash + newData.card} –≥—Ä–Ω
<b>–ó–ü –ø—Ä–æ–¥–∞–≤—Ü—è:</b> ${newData.salary} –≥—Ä–Ω
<b>–ú–æ—î:</b> ${newData.mine} –≥—Ä–Ω`;

    const flavorList = flavors.length
      ? `<b>üì¶ –ê–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä—ñ–¥–∏–Ω:</b>
` + flavors.join('\n')
      : `<b>–£–í–ê–ì–ê:</b> –£—Å—ñ —Ä—ñ–¥–∏–Ω–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å.`;

    const disappearanceList = [...emptyBrands.map(b => `–ë—Ä–µ–Ω–¥ –∑–Ω–∏–∫: ${b}`), ...emptyFlavors.map(f => `–°–º–∞–∫ –∑–Ω–∏–∫: ${f}`)].join('\n');

    await sendTelegramMessage(reportMessage);
    await sendTelegramMessage(flavorList);
    if (disappearanceList) {
      await sendTelegramMessage(`‚ùó <b>–ó–º—ñ–Ω–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:</b>\n${disappearanceList}`);
    }
  };




  const updateLog = async (newData: any, operation = '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö') => {
    const ref = doc(db, 'seller_logs', 'current');
    await setDoc(ref, newData);
    setLog(newData);
    setForm({
      total: String(newData.total ?? 0),
      cash: String(newData.cash ?? 0),
      card: String(newData.card ?? 0),
      salary: String(newData.salary ?? 0),
      mine: String(newData.mine ?? 0),
    });
    await sendReportAndAvailability(newData, operation);
  };

  const confirmAndExecute = (message: string, callback: () => void) => {
    if (confirm(message)) {
      callback();
    }
  };

  const handleSave = () => {
    confirmAndExecute('–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏?', async () => {
      await updateLog({
        total: Number(form.total),
        cash: Number(form.cash),
        card: Number(form.card),
        salary: Number(form.salary),
        mine: Number(form.mine)
      }, '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö');
      toast.success('–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
      setEditMode(false);
    });
  };

  const handlePay = (type: 'mine' | 'salary') => {
    const num = Number(amount);
    if (!num || num <= 0) return toast.error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞');
    confirmAndExecute(`–í–∏–¥–∞—Ç–∏ ${num} –≥—Ä–Ω ${type === 'mine' ? '—Å–æ–±—ñ' : '–ø—Ä–æ–¥–∞–≤—Ü—é'}?`, async () => {
      const updated = { ...log, [type]: log[type] - num };
      await updateLog(updated, `üíµ –í–∏–¥–∞–Ω–æ ${num} –≥—Ä–Ω ${type === 'mine' ? '—Å–æ–±—ñ' : '–ø—Ä–æ–¥–∞–≤—Ü—é'}`);
      toast.success('–ó–ü –≤–∏–¥–∞–Ω–æ');
      setAmount('');
    });
  };

  const handleCashChange = (type: 'add' | 'remove', field: 'cash' | 'card') => {
    const num = Number(amount);
    if (!num || num <= 0) return toast.error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞');
    confirmAndExecute(`${type === 'add' ? '–î–æ–¥–∞—Ç–∏' : '–ó–Ω—è—Ç–∏'} ${num} –≥—Ä–Ω ${field === 'cash' ? '–≥–æ—Ç—ñ–≤–∫–∏' : '–∫–∞—Ä—Ç–∏'}?`, async () => {
      const updated = {
        ...log,
        [field]: type === 'add' ? log[field] + num : log[field] - num
      };
      await updateLog(updated, `${type === 'add' ? '‚ûï –î–æ–¥–∞–Ω–æ' : '‚ûñ –ó–Ω—è—Ç–æ'} ${num} –≥—Ä–Ω ${field === 'cash' ? '–≥–æ—Ç—ñ–≤–∫–∏' : '–∫–∞—Ä—Ç–∏'}`);
      toast.success('–û–Ω–æ–≤–ª–µ–Ω–æ');
      setAmount('');
    });
  };

  if (!log) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;

  return (
    <div className="space-y-4 max-w-xl mx-auto p-4">
      <h2 className="text-2xl font-bold">üìä –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</h2>

      <div className="flex gap-2 flex-wrap">
        <Link href="/admin/arrival" className="bg-blue-600 text-white px-4 py-2 rounded">üì¶ –ü—Ä–∏—Ö—ñ–¥</Link>
        <Link href="/admin/products" className="bg-green-600 text-white px-4 py-2 rounded">üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤</Link>
        <Link href="/admin/discard" className="bg-red-600 text-white px-4 py-2 rounded">üóëÔ∏è –°–ø–∏—Å–∞—Ç–∏ —Ç–æ–≤–∞—Ä</Link>
        <button onClick={() => router.push('/admin/stats')} className="bg-purple-700 text-white px-4 py-2 rounded">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
      </div>

      {editMode ? (
        <div className="space-y-2">
          {['total', 'cash', 'card', 'salary', 'mine'].map((key) => (
            <input
              key={key}
              value={form[key as keyof typeof form]}
              onChange={(e) => setForm({ ...form, [key]: e.target.value })}
              placeholder={key}
              className="border p-2 w-full"
            />
          ))}
          <button onClick={handleSave} className="bg-blue-600 text-white py-2 px-4 rounded">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
        </div>
      ) : (
        <div className="space-y-1">
          <p>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–≤–∞—Ä (–∑–∞–ª–∏—à–æ–∫): {log.total} –≥—Ä–Ω</p>
          <p>–ì–æ—Ç—ñ–≤–∫–∞: {log.cash} –≥—Ä–Ω</p>
          <p>–ö–∞—Ä—Ç–∞: {log.card} –≥—Ä–Ω</p>
          <p>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {log.cash + log.card} –≥—Ä–Ω</p>
          <p>–ó–ü –ø—Ä–æ–¥–∞–≤—Ü—è: {log.salary} –≥—Ä–Ω</p>
          <p>–ú–æ—î: {log.mine} –≥—Ä–Ω</p>
        </div>
      )}

      <button onClick={() => setEditMode(!editMode)} className="text-blue-600 underline">
        {editMode ? '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è' : '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ'}
      </button>

      <div className="border-t pt-4 mt-4 space-y-2">
        <h3 className="font-semibold">üí∏ –û–ø–µ—Ä–∞—Ü—ñ—ó</h3>
        <input
          type="number"
          placeholder="–°—É–º–∞"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          className="border p-2 w-full"
        />
        <div className="grid grid-cols-2 gap-2">
          <button onClick={() => handlePay('mine')} className="bg-green-600 text-white py-2 px-4 rounded">–í–∏–¥–∞—Ç–∏ —Å–æ–±—ñ</button>
          <button onClick={() => handlePay('salary')} className="bg-yellow-600 text-white py-2 px-4 rounded">–í–∏–¥–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é</button>
          <button onClick={() => handleCashChange('add', 'cash')} className="bg-blue-500 text-white py-2 px-4 rounded">–î–æ–¥–∞—Ç–∏ –≥–æ—Ç—ñ–≤–∫—É</button>
          <button onClick={() => handleCashChange('remove', 'cash')} className="bg-blue-800 text-white py-2 px-4 rounded">–ó–Ω—è—Ç–∏ –≥–æ—Ç—ñ–≤–∫—É</button>
          <button onClick={() => handleCashChange('add', 'card')} className="bg-purple-500 text-white py-2 px-4 rounded">–î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç—É</button>
          <button onClick={() => handleCashChange('remove', 'card')} className="bg-purple-800 text-white py-2 px-4 rounded">–ó–Ω—è—Ç–∏ –∫–∞—Ä—Ç—É</button>
        </div>
      </div>
    </div>
  );
}
